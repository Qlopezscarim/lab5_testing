// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_write_task_Pipeline_VITIS_LOOP_54_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_0_AWVALID,
        m_axi_gmem_0_AWREADY,
        m_axi_gmem_0_AWADDR,
        m_axi_gmem_0_AWID,
        m_axi_gmem_0_AWLEN,
        m_axi_gmem_0_AWSIZE,
        m_axi_gmem_0_AWBURST,
        m_axi_gmem_0_AWLOCK,
        m_axi_gmem_0_AWCACHE,
        m_axi_gmem_0_AWPROT,
        m_axi_gmem_0_AWQOS,
        m_axi_gmem_0_AWREGION,
        m_axi_gmem_0_AWUSER,
        m_axi_gmem_0_WVALID,
        m_axi_gmem_0_WREADY,
        m_axi_gmem_0_WDATA,
        m_axi_gmem_0_WSTRB,
        m_axi_gmem_0_WLAST,
        m_axi_gmem_0_WID,
        m_axi_gmem_0_WUSER,
        m_axi_gmem_0_ARVALID,
        m_axi_gmem_0_ARREADY,
        m_axi_gmem_0_ARADDR,
        m_axi_gmem_0_ARID,
        m_axi_gmem_0_ARLEN,
        m_axi_gmem_0_ARSIZE,
        m_axi_gmem_0_ARBURST,
        m_axi_gmem_0_ARLOCK,
        m_axi_gmem_0_ARCACHE,
        m_axi_gmem_0_ARPROT,
        m_axi_gmem_0_ARQOS,
        m_axi_gmem_0_ARREGION,
        m_axi_gmem_0_ARUSER,
        m_axi_gmem_0_RVALID,
        m_axi_gmem_0_RREADY,
        m_axi_gmem_0_RDATA,
        m_axi_gmem_0_RLAST,
        m_axi_gmem_0_RID,
        m_axi_gmem_0_RFIFONUM,
        m_axi_gmem_0_RUSER,
        m_axi_gmem_0_RRESP,
        m_axi_gmem_0_BVALID,
        m_axi_gmem_0_BREADY,
        m_axi_gmem_0_BRESP,
        m_axi_gmem_0_BID,
        m_axi_gmem_0_BUSER,
        p_read,
        sext_ln54,
        output_r_address0,
        output_r_ce0,
        output_r_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_0_AWVALID;
input   m_axi_gmem_0_AWREADY;
output  [63:0] m_axi_gmem_0_AWADDR;
output  [0:0] m_axi_gmem_0_AWID;
output  [31:0] m_axi_gmem_0_AWLEN;
output  [2:0] m_axi_gmem_0_AWSIZE;
output  [1:0] m_axi_gmem_0_AWBURST;
output  [1:0] m_axi_gmem_0_AWLOCK;
output  [3:0] m_axi_gmem_0_AWCACHE;
output  [2:0] m_axi_gmem_0_AWPROT;
output  [3:0] m_axi_gmem_0_AWQOS;
output  [3:0] m_axi_gmem_0_AWREGION;
output  [0:0] m_axi_gmem_0_AWUSER;
output   m_axi_gmem_0_WVALID;
input   m_axi_gmem_0_WREADY;
output  [255:0] m_axi_gmem_0_WDATA;
output  [31:0] m_axi_gmem_0_WSTRB;
output   m_axi_gmem_0_WLAST;
output  [0:0] m_axi_gmem_0_WID;
output  [0:0] m_axi_gmem_0_WUSER;
output   m_axi_gmem_0_ARVALID;
input   m_axi_gmem_0_ARREADY;
output  [63:0] m_axi_gmem_0_ARADDR;
output  [0:0] m_axi_gmem_0_ARID;
output  [31:0] m_axi_gmem_0_ARLEN;
output  [2:0] m_axi_gmem_0_ARSIZE;
output  [1:0] m_axi_gmem_0_ARBURST;
output  [1:0] m_axi_gmem_0_ARLOCK;
output  [3:0] m_axi_gmem_0_ARCACHE;
output  [2:0] m_axi_gmem_0_ARPROT;
output  [3:0] m_axi_gmem_0_ARQOS;
output  [3:0] m_axi_gmem_0_ARREGION;
output  [0:0] m_axi_gmem_0_ARUSER;
input   m_axi_gmem_0_RVALID;
output   m_axi_gmem_0_RREADY;
input  [255:0] m_axi_gmem_0_RDATA;
input   m_axi_gmem_0_RLAST;
input  [0:0] m_axi_gmem_0_RID;
input  [8:0] m_axi_gmem_0_RFIFONUM;
input  [0:0] m_axi_gmem_0_RUSER;
input  [1:0] m_axi_gmem_0_RRESP;
input   m_axi_gmem_0_BVALID;
output   m_axi_gmem_0_BREADY;
input  [1:0] m_axi_gmem_0_BRESP;
input  [0:0] m_axi_gmem_0_BID;
input  [0:0] m_axi_gmem_0_BUSER;
input  [31:0] p_read;
input  [58:0] sext_ln54;
output  [9:0] output_r_address0;
output   output_r_ce0;
input  [18:0] output_r_q0;

reg ap_idle;
reg m_axi_gmem_0_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln58_1_reg_407;
reg   [0:0] icmp_ln58_1_reg_407_pp0_iter2_reg;
reg    ap_block_state4_io_grp1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_164_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_W;
wire    ap_block_pp0_stage0_grp1;
wire    ap_block_pp0_stage0_11001_grp0;
wire    ap_block_pp0_stage0_subdone_grp0;
reg    ap_block_pp0_stage0_11001_grp1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln58_1_fu_185_p2;
reg   [0:0] icmp_ln58_1_reg_407_pp0_iter1_reg;
wire   [0:0] icmp_ln58_fu_196_p2;
reg   [0:0] icmp_ln58_reg_412;
wire   [0:0] tmp_fu_202_p3;
reg   [0:0] tmp_reg_417;
wire   [18:0] select_ln58_fu_216_p3;
reg   [18:0] select_ln58_reg_422;
wire   [4:0] trunc_ln58_fu_232_p1;
reg   [4:0] trunc_ln58_reg_427;
wire   [31:0] empty_fu_322_p3;
reg   [31:0] empty_reg_433;
wire   [63:0] zext_ln54_1_fu_176_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001_grp1;
reg   [223:0] phi_ln58_fu_102;
wire   [223:0] select_ln58_2_fu_366_p3;
wire    ap_loop_init;
reg   [30:0] i_fu_106;
wire   [30:0] add_ln54_fu_170_p2;
reg   [30:0] ap_sig_allocacmp_i_1;
reg    output_r_ce0_local;
wire   [31:0] zext_ln54_fu_160_p1;
wire   [2:0] trunc_ln54_fu_181_p1;
wire   [18:0] sub_ln58_fu_210_p2;
wire   [18:0] tmp_1_fu_224_p1;
wire   [18:0] tmp_1_fu_224_p3;
wire   [4:0] add_ln58_fu_239_p2;
wire   [42:0] zext_ln58_fu_236_p1;
wire   [42:0] zext_ln58_1_fu_244_p1;
wire   [42:0] shl_ln58_fu_248_p2;
wire   [41:0] lshr_ln_fu_254_p4;
wire   [0:0] tmp_4_fu_268_p3;
wire   [4:0] sub_ln58_1_fu_284_p2;
wire   [7:0] select_ln58_1_fu_276_p3;
wire  signed [7:0] sext_ln58_fu_289_p1;
wire   [7:0] add_ln58_1_fu_293_p2;
wire   [63:0] zext_ln58_2_fu_264_p1;
wire   [8:0] tmp_2_fu_299_p3;
wire   [63:0] pi_assign_fu_306_p5;
wire   [31:0] LD_fu_318_p1;
wire   [191:0] tmp_3_fu_349_p4;
wire   [223:0] tmp_5_fu_359_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [18:0] tmp_1_fu_224_p0;
wire   [0:0] tmp_1_fu_224_p2;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 phi_ln58_fu_102 = 224'd0;
#0 i_fu_106 = 31'd0;
#0 ap_done_reg = 1'b0;
end

top_ctlz_19_19_1_1 #(
    .din_WIDTH( 19 ),
    .dout_WIDTH( 19 ))
ctlz_19_19_1_1_U30(
    .din(tmp_1_fu_224_p1),
    .dout(tmp_1_fu_224_p3)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_164_p2 == 1'd1))) begin
            i_fu_106 <= add_ln54_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            phi_ln58_fu_102 <= 224'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            phi_ln58_fu_102 <= select_ln58_2_fu_366_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln58_1_reg_407 <= icmp_ln58_1_fu_185_p2;
        icmp_ln58_1_reg_407_pp0_iter1_reg <= icmp_ln58_1_reg_407;
        icmp_ln58_reg_412 <= icmp_ln58_fu_196_p2;
        select_ln58_reg_422 <= select_ln58_fu_216_p3;
        tmp_reg_417 <= output_r_q0[32'd18];
        trunc_ln58_reg_427 <= trunc_ln58_fu_232_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001_grp1)) begin
        empty_reg_433 <= empty_fu_322_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln58_1_reg_407_pp0_iter2_reg <= icmp_ln58_1_reg_407_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln54_fu_164_p2 == 1'd0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (icmp_ln58_1_reg_407_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_0_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (icmp_ln58_1_reg_407_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_gmem_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_ce0_local = 1'b1;
    end else begin
        output_r_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LD_fu_318_p1 = pi_assign_fu_306_p5[31:0];

assign add_ln54_fu_170_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign add_ln58_1_fu_293_p2 = ($signed(select_ln58_1_fu_276_p3) + $signed(sext_ln58_fu_289_p1));

assign add_ln58_fu_239_p2 = (trunc_ln58_reg_427 + 5'd6);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io_grp1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io_grp1 = ((icmp_ln58_1_reg_407_pp0_iter2_reg == 1'd1) & (m_axi_gmem_0_WREADY == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_322_p3 = ((icmp_ln58_reg_412[0:0] == 1'b1) ? 32'd0 : LD_fu_318_p1);

assign icmp_ln54_fu_164_p2 = (($signed(zext_ln54_fu_160_p1) < $signed(p_read)) ? 1'b1 : 1'b0);

assign icmp_ln58_1_fu_185_p2 = ((trunc_ln54_fu_181_p1 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_196_p2 = ((output_r_q0 == 19'd0) ? 1'b1 : 1'b0);

assign lshr_ln_fu_254_p4 = {{shl_ln58_fu_248_p2[42:1]}};

assign m_axi_gmem_0_ARADDR = 64'd0;

assign m_axi_gmem_0_ARBURST = 2'd0;

assign m_axi_gmem_0_ARCACHE = 4'd0;

assign m_axi_gmem_0_ARID = 1'd0;

assign m_axi_gmem_0_ARLEN = 32'd0;

assign m_axi_gmem_0_ARLOCK = 2'd0;

assign m_axi_gmem_0_ARPROT = 3'd0;

assign m_axi_gmem_0_ARQOS = 4'd0;

assign m_axi_gmem_0_ARREGION = 4'd0;

assign m_axi_gmem_0_ARSIZE = 3'd0;

assign m_axi_gmem_0_ARUSER = 1'd0;

assign m_axi_gmem_0_ARVALID = 1'b0;

assign m_axi_gmem_0_AWADDR = 64'd0;

assign m_axi_gmem_0_AWBURST = 2'd0;

assign m_axi_gmem_0_AWCACHE = 4'd0;

assign m_axi_gmem_0_AWID = 1'd0;

assign m_axi_gmem_0_AWLEN = 32'd0;

assign m_axi_gmem_0_AWLOCK = 2'd0;

assign m_axi_gmem_0_AWPROT = 3'd0;

assign m_axi_gmem_0_AWQOS = 4'd0;

assign m_axi_gmem_0_AWREGION = 4'd0;

assign m_axi_gmem_0_AWSIZE = 3'd0;

assign m_axi_gmem_0_AWUSER = 1'd0;

assign m_axi_gmem_0_AWVALID = 1'b0;

assign m_axi_gmem_0_BREADY = 1'b0;

assign m_axi_gmem_0_RREADY = 1'b0;

assign m_axi_gmem_0_WDATA = {{empty_reg_433}, {phi_ln58_fu_102}};

assign m_axi_gmem_0_WID = 1'd0;

assign m_axi_gmem_0_WLAST = 1'b0;

assign m_axi_gmem_0_WSTRB = 32'd4294967295;

assign m_axi_gmem_0_WUSER = 1'd0;

assign output_r_address0 = zext_ln54_1_fu_176_p1;

assign output_r_ce0 = output_r_ce0_local;

assign pi_assign_fu_306_p5 = {{zext_ln58_2_fu_264_p1[63:32]}, {tmp_2_fu_299_p3}, {zext_ln58_2_fu_264_p1[22:0]}};

assign select_ln58_1_fu_276_p3 = ((tmp_4_fu_268_p3[0:0] == 1'b1) ? 8'd127 : 8'd126);

assign select_ln58_2_fu_366_p3 = ((icmp_ln58_1_reg_407_pp0_iter2_reg[0:0] == 1'b1) ? 224'd0 : tmp_5_fu_359_p3);

assign select_ln58_fu_216_p3 = ((tmp_fu_202_p3[0:0] == 1'b1) ? sub_ln58_fu_210_p2 : output_r_q0);

assign sext_ln58_fu_289_p1 = $signed(sub_ln58_1_fu_284_p2);

assign shl_ln58_fu_248_p2 = zext_ln58_fu_236_p1 << zext_ln58_1_fu_244_p1;

assign sub_ln58_1_fu_284_p2 = (5'd3 - trunc_ln58_reg_427);

assign sub_ln58_fu_210_p2 = (19'd0 - output_r_q0);

assign tmp_1_fu_224_p1 = ((tmp_fu_202_p3[0:0] == 1'b1) ? sub_ln58_fu_210_p2 : output_r_q0);

assign tmp_2_fu_299_p3 = {{tmp_reg_417}, {add_ln58_1_fu_293_p2}};

assign tmp_3_fu_349_p4 = {{phi_ln58_fu_102[223:32]}};

assign tmp_4_fu_268_p3 = shl_ln58_fu_248_p2[32'd25];

assign tmp_5_fu_359_p3 = {{empty_reg_433}, {tmp_3_fu_349_p4}};

assign tmp_fu_202_p3 = output_r_q0[32'd18];

assign trunc_ln54_fu_181_p1 = ap_sig_allocacmp_i_1[2:0];

assign trunc_ln58_fu_232_p1 = tmp_1_fu_224_p3[4:0];

assign zext_ln54_1_fu_176_p1 = ap_sig_allocacmp_i_1;

assign zext_ln54_fu_160_p1 = ap_sig_allocacmp_i_1;

assign zext_ln58_1_fu_244_p1 = add_ln58_fu_239_p2;

assign zext_ln58_2_fu_264_p1 = lshr_ln_fu_254_p4;

assign zext_ln58_fu_236_p1 = select_ln58_reg_422;

endmodule //top_write_task_Pipeline_VITIS_LOOP_54_1
