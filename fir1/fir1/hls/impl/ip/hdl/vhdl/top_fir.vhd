-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (16 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_fir is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_FFFFCCCC : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111100110011001100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2666 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010011001100110";
    constant ap_const_lv31_7FFFE666 : STD_LOGIC_VECTOR (30 downto 0) := "1111111111111111110011001100110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv29_666 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000011001100110";
    constant ap_const_lv32_FFFFD999 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111101100110011001";
    constant ap_const_lv31_1999 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001100110011001";
    constant ap_const_lv30_CCC : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000110011001100";
    constant ap_const_lv30_3FFFF333 : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111001100110011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln12_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_delayed : STD_LOGIC;
    signal p_read_3_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read_3_reg_728_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_read_3_reg_728_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln12_reg_732 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_732_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_732_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln12_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_736 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_736_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_736_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln12_reg_736_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_11_reg_746 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln_reg_752 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln29_1_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_1_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_2_fu_315_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln29_2_reg_762 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_12_reg_767 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_reg_772 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln29_4_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_4_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_5_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln29_5_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_787 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln29_7_fu_574_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln29_7_reg_792 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln29_8_fu_584_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln29_8_reg_797 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal n_fu_100 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln12_fu_235_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal reg_fu_104 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_2_fu_108 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_4_fu_112 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_6_fu_116 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_8_fu_120 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_1_fu_124 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_3_fu_128 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_5_fu_132 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal reg_7_fu_136 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal in_r_ce0_local : STD_LOGIC;
    signal out_r_we0_local : STD_LOGIC;
    signal out_r_ce0_local : STD_LOGIC;
    signal zext_ln12_1_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_fu_263_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_fu_267_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_273_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln29_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_1_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_2_fu_301_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_1_fu_305_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln29_4_fu_311_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_2_fu_315_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_347_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln29_18_fu_354_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_3_fu_358_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_1_fu_361_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_fu_367_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln_fu_377_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_5_fu_385_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_2_fu_388_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_fu_394_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln29_3_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln29_3_fu_415_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal and_ln29_1_fu_404_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_7_fu_421_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_3_fu_425_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_8_fu_441_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_4_fu_445_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln29_10_fu_451_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_5_fu_455_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal and_ln29_2_fu_479_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_9_fu_486_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_4_fu_489_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_fu_495_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln29_3_fu_505_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_11_fu_513_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_5_fu_516_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_522_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln29_12_fu_540_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_6_fu_544_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln29_6_fu_544_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln29_4_fu_532_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_13_fu_550_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_6_fu_554_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_14_fu_570_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_7_fu_574_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln29_16_fu_580_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln29_8_fu_584_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal and_ln29_5_fu_604_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_15_fu_611_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_7_fu_614_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_2_fu_620_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln29_6_fu_630_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln29_17_fu_638_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln29_8_fu_641_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_105 : BOOLEAN;
    signal ap_condition_165 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component top_mul_17s_15s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_17s_15ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_17s_14s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component top_mul_17s_12ns_29_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component top_mul_17s_14ns_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component top_mul_17s_13ns_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component top_mul_17s_13s_30_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component top_flow_control_loop_delay_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_loop_exit_ready_delayed : IN STD_LOGIC );
    end component;



begin
    mul_17s_15s_32_1_1_U11 : component top_mul_17s_15s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => sext_ln29_fu_263_p0,
        din1 => mul_ln29_fu_267_p1,
        dout => mul_ln29_fu_267_p2);

    mul_17s_15ns_32_1_1_U12 : component top_mul_17s_15ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => sext_ln29_2_fu_301_p0,
        din1 => mul_ln29_1_fu_305_p1,
        dout => mul_ln29_1_fu_305_p2);

    mul_17s_14s_31_1_1_U13 : component top_mul_17s_14s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 31)
    port map (
        din0 => sext_ln29_4_fu_311_p0,
        din1 => mul_ln29_2_fu_315_p1,
        dout => mul_ln29_2_fu_315_p2);

    mul_17s_12ns_29_1_1_U14 : component top_mul_17s_12ns_29_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 29)
    port map (
        din0 => reg_11_reg_746,
        din1 => mul_ln29_3_fu_415_p1,
        dout => mul_ln29_3_fu_415_p2);

    mul_17s_15ns_32_1_1_U15 : component top_mul_17s_15ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => sext_ln29_8_fu_441_p0,
        din1 => mul_ln29_4_fu_445_p1,
        dout => mul_ln29_4_fu_445_p2);

    mul_17s_15s_32_1_1_U16 : component top_mul_17s_15s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => sext_ln29_10_fu_451_p0,
        din1 => mul_ln29_5_fu_455_p1,
        dout => mul_ln29_5_fu_455_p2);

    mul_17s_14ns_31_1_1_U17 : component top_mul_17s_14ns_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 14,
        dout_WIDTH => 31)
    port map (
        din0 => sext_ln29_12_fu_540_p0,
        din1 => mul_ln29_6_fu_544_p1,
        dout => mul_ln29_6_fu_544_p2);

    mul_17s_13ns_30_1_1_U18 : component top_mul_17s_13ns_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 30)
    port map (
        din0 => sext_ln29_14_fu_570_p0,
        din1 => mul_ln29_7_fu_574_p1,
        dout => mul_ln29_7_fu_574_p2);

    mul_17s_13s_30_1_1_U19 : component top_mul_17s_13s_30_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 30)
    port map (
        din0 => sext_ln29_16_fu_580_p0,
        din1 => mul_ln29_8_fu_584_p1,
        dout => mul_ln29_8_fu_584_p2);

    flow_control_loop_delay_pipe_U : component top_flow_control_loop_delay_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue,
        ap_loop_exit_ready_delayed => ap_loop_exit_ready_delayed);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_return_preg <= p_read_3_reg_728_pp0_iter2_reg;
                end if; 
            end if;
        end if;
    end process;


    n_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_105)) then
                if ((icmp_ln12_fu_229_p2 = ap_const_lv1_1)) then 
                    n_fu_100 <= add_ln12_fu_235_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_100 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;

    reg_1_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    reg_1_fu_124 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln12_reg_732 = ap_const_lv1_1))) then 
                    reg_1_fu_124 <= reg_fu_104;
                end if;
            end if; 
        end if;
    end process;

    reg_2_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    reg_2_fu_108 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln12_reg_732 = ap_const_lv1_1))) then 
                    reg_2_fu_108 <= reg_1_fu_124;
                end if;
            end if; 
        end if;
    end process;

    reg_3_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    reg_3_fu_128 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln12_reg_732 = ap_const_lv1_1))) then 
                    reg_3_fu_128 <= reg_2_fu_108;
                end if;
            end if; 
        end if;
    end process;

    reg_4_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    reg_4_fu_112 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter1_reg = ap_const_lv1_1))) then 
                    reg_4_fu_112 <= reg_11_reg_746;
                end if;
            end if; 
        end if;
    end process;

    reg_5_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    reg_5_fu_132 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter1_reg = ap_const_lv1_1))) then 
                    reg_5_fu_132 <= reg_4_fu_112;
                end if;
            end if; 
        end if;
    end process;

    reg_6_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    reg_6_fu_116 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter2_reg = ap_const_lv1_1))) then 
                    reg_6_fu_116 <= reg_12_reg_767;
                end if;
            end if; 
        end if;
    end process;

    reg_7_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    reg_7_fu_136 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter2_reg = ap_const_lv1_1))) then 
                    reg_7_fu_136 <= reg_6_fu_116;
                end if;
            end if; 
        end if;
    end process;

    reg_8_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    reg_8_fu_120 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter2_reg = ap_const_lv1_1))) then 
                    reg_8_fu_120 <= reg_7_fu_136;
                end if;
            end if; 
        end if;
    end process;

    reg_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_start_int = ap_const_logic_1) and (ap_loop_init = ap_const_logic_1))) then 
                    reg_fu_104 <= ap_const_lv17_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln12_reg_732 = ap_const_lv1_1))) then 
                    reg_fu_104 <= in_r_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg <= ap_condition_exit_pp0_iter0_stage0;
                ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln12_reg_732 <= icmp_ln12_fu_229_p2;
                icmp_ln12_reg_732_pp0_iter1_reg <= icmp_ln12_reg_732;
                mul_ln29_1_reg_757 <= mul_ln29_1_fu_305_p2;
                mul_ln29_2_reg_762 <= mul_ln29_2_fu_315_p2;
                p_read_3_reg_728_pp0_iter1_reg <= p_read_3_reg_728;
                reg_11_reg_746 <= reg_3_fu_128;
                trunc_ln_reg_752 <= add_ln29_fu_285_p2(31 downto 14);
                    zext_ln12_reg_736(30 downto 0) <= zext_ln12_fu_241_p1(30 downto 0);
                    zext_ln12_reg_736_pp0_iter1_reg(30 downto 0) <= zext_ln12_reg_736(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg <= ap_condition_exit_pp0_iter0_stage0_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln12_reg_732_pp0_iter2_reg <= icmp_ln12_reg_732_pp0_iter1_reg;
                mul_ln29_4_reg_777 <= mul_ln29_4_fu_445_p2;
                mul_ln29_5_reg_782 <= mul_ln29_5_fu_455_p2;
                mul_ln29_7_reg_792 <= mul_ln29_7_fu_574_p2;
                mul_ln29_8_reg_797 <= mul_ln29_8_fu_584_p2;
                p_read_3_reg_728_pp0_iter2_reg <= p_read_3_reg_728_pp0_iter1_reg;
                reg_12_reg_767 <= reg_5_fu_132;
                tmp_1_reg_787 <= add_ln29_6_fu_554_p2(32 downto 14);
                tmp_8_reg_772 <= add_ln29_3_fu_425_p2(32 downto 14);
                    zext_ln12_reg_736_pp0_iter2_reg(30 downto 0) <= zext_ln12_reg_736_pp0_iter1_reg(30 downto 0);
                    zext_ln12_reg_736_pp0_iter3_reg(30 downto 0) <= zext_ln12_reg_736_pp0_iter2_reg(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_read_3_reg_728 <= p_read;
            end if;
        end if;
    end process;
    zext_ln12_reg_736(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln12_reg_736_pp0_iter1_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln12_reg_736_pp0_iter2_reg(63 downto 31) <= "000000000000000000000000000000000";
    zext_ln12_reg_736_pp0_iter3_reg(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln12_fu_235_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_n_1) + unsigned(ap_const_lv31_1));
    add_ln29_1_fu_361_p2 <= std_logic_vector(signed(sext_ln29_18_fu_354_p1) + signed(sext_ln29_3_fu_358_p1));
    add_ln29_2_fu_388_p2 <= std_logic_vector(unsigned(and_ln_fu_377_p3) + unsigned(sext_ln29_5_fu_385_p1));
    add_ln29_3_fu_425_p2 <= std_logic_vector(unsigned(and_ln29_1_fu_404_p3) + unsigned(sext_ln29_7_fu_421_p1));
    add_ln29_4_fu_489_p2 <= std_logic_vector(unsigned(and_ln29_2_fu_479_p3) + unsigned(sext_ln29_9_fu_486_p1));
    add_ln29_5_fu_516_p2 <= std_logic_vector(unsigned(and_ln29_3_fu_505_p3) + unsigned(sext_ln29_11_fu_513_p1));
    add_ln29_6_fu_554_p2 <= std_logic_vector(unsigned(and_ln29_4_fu_532_p3) + unsigned(sext_ln29_13_fu_550_p1));
    add_ln29_7_fu_614_p2 <= std_logic_vector(unsigned(and_ln29_5_fu_604_p3) + unsigned(sext_ln29_15_fu_611_p1));
    add_ln29_8_fu_641_p2 <= std_logic_vector(unsigned(and_ln29_6_fu_630_p3) + unsigned(sext_ln29_17_fu_638_p1));
    add_ln29_fu_285_p2 <= std_logic_vector(unsigned(mul_ln29_fu_267_p2) + unsigned(sext_ln29_1_fu_281_p1));
    and_ln29_1_fu_404_p3 <= (tmp_7_fu_394_p4 & ap_const_lv14_0);
    and_ln29_2_fu_479_p3 <= (tmp_8_reg_772 & ap_const_lv14_0);
    and_ln29_3_fu_505_p3 <= (tmp_9_fu_495_p4 & ap_const_lv14_0);
    and_ln29_4_fu_532_p3 <= (tmp_s_fu_522_p4 & ap_const_lv14_0);
    and_ln29_5_fu_604_p3 <= (tmp_1_reg_787 & ap_const_lv14_0);
    and_ln29_6_fu_630_p3 <= (tmp_2_fu_620_p4 & ap_const_lv14_0);
    and_ln_fu_377_p3 <= (tmp_6_fu_367_p4 & ap_const_lv14_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_condition_105_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_105 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_165_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_start_int)
    begin
                ap_condition_165 <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln12_fu_229_p2, ap_start_int)
    begin
        if (((icmp_ln12_fu_229_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, icmp_ln12_reg_732_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln12_reg_732_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_loop_exit_ready_delayed_assign_proc : process(ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0_pp0_iter3_reg))) then 
            ap_loop_exit_ready_delayed <= ap_const_logic_1;
        else 
            ap_loop_exit_ready_delayed <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_block_pp0_stage0_11001, p_read_3_reg_728_pp0_iter2_reg, ap_return_preg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_return <= p_read_3_reg_728_pp0_iter2_reg;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_allocacmp_n_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_100, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_n_1 <= n_fu_100;
        end if; 
    end process;

    icmp_ln12_fu_229_p2 <= "1" when (signed(zext_ln12_1_fu_225_p1) < signed(p_read)) else "0";
    in_r_address0 <= zext_ln12_fu_241_p1(10 - 1 downto 0);
    in_r_ce0 <= in_r_ce0_local;

    in_r_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_ce0_local <= ap_const_logic_1;
        else 
            in_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_1_fu_305_p1 <= ap_const_lv32_2666(15 - 1 downto 0);
    mul_ln29_2_fu_315_p1 <= ap_const_lv31_7FFFE666(14 - 1 downto 0);
    mul_ln29_3_fu_415_p1 <= ap_const_lv29_666(12 - 1 downto 0);
    mul_ln29_4_fu_445_p1 <= ap_const_lv32_2666(15 - 1 downto 0);
    mul_ln29_5_fu_455_p1 <= ap_const_lv32_FFFFD999(15 - 1 downto 0);
    mul_ln29_6_fu_544_p1 <= ap_const_lv31_1999(14 - 1 downto 0);
    mul_ln29_7_fu_574_p1 <= ap_const_lv30_CCC(13 - 1 downto 0);
    mul_ln29_8_fu_584_p1 <= ap_const_lv30_3FFFF333(13 - 1 downto 0);
    mul_ln29_fu_267_p1 <= ap_const_lv32_FFFFCCCC(15 - 1 downto 0);
    out_r_address0 <= zext_ln12_reg_736_pp0_iter3_reg(10 - 1 downto 0);
    out_r_ce0 <= out_r_ce0_local;

    out_r_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_r_ce0_local <= ap_const_logic_1;
        else 
            out_r_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= add_ln29_8_fu_641_p2(32 downto 14);
    out_r_we0 <= out_r_we0_local;

    out_r_we0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_r_we0_local <= ap_const_logic_1;
        else 
            out_r_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    sext_ln29_10_fu_451_p0 <= reg_5_fu_132;
        sext_ln29_11_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_5_reg_782),33));

    sext_ln29_12_fu_540_p0 <= reg_6_fu_116;
        sext_ln29_13_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_6_fu_544_p2),33));

    sext_ln29_14_fu_570_p0 <= reg_7_fu_136;
        sext_ln29_15_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_7_reg_792),33));

    sext_ln29_16_fu_580_p0 <= reg_8_fu_120;
        sext_ln29_17_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_8_reg_797),33));

        sext_ln29_18_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_347_p3),33));

        sext_ln29_1_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_273_p3),32));

    sext_ln29_2_fu_301_p0 <= reg_1_fu_124;
        sext_ln29_3_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_1_reg_757),33));

    sext_ln29_4_fu_311_p0 <= reg_2_fu_108;
        sext_ln29_5_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_2_reg_762),33));

        sext_ln29_7_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_3_fu_415_p2),33));

    sext_ln29_8_fu_441_p0 <= reg_4_fu_112;
        sext_ln29_9_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln29_4_reg_777),33));

    sext_ln29_fu_263_p0 <= reg_fu_104;
    shl_ln_fu_273_p3 <= (in_r_q0 & ap_const_lv14_0);
    tmp_2_fu_620_p4 <= add_ln29_7_fu_614_p2(32 downto 14);
    tmp_6_fu_367_p4 <= add_ln29_1_fu_361_p2(32 downto 14);
    tmp_7_fu_394_p4 <= add_ln29_2_fu_388_p2(32 downto 14);
    tmp_9_fu_495_p4 <= add_ln29_4_fu_489_p2(32 downto 14);
    tmp_fu_347_p3 <= (trunc_ln_reg_752 & ap_const_lv14_0);
    tmp_s_fu_522_p4 <= add_ln29_5_fu_516_p2(32 downto 14);
    zext_ln12_1_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_n_1),32));
    zext_ln12_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_n_1),64));
end behav;
