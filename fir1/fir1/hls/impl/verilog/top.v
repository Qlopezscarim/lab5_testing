// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_top,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=1659,HLS_SYN_TPT=576,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=4370,HLS_SYN_LUT=7692,HLS_VERSION=2024_2}" *)

module top (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 256;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire   [16:0] input_r_i_q0;
wire   [16:0] input_r_t_q0;
wire   [18:0] output_r_i_q0;
wire   [18:0] output_r_t_q0;
wire   [63:0] in_r;
wire   [63:0] out_r;
wire   [31:0] N;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_continue;
wire    ap_idle;
wire    gmem_0_AWREADY;
wire    gmem_0_WREADY;
wire    gmem_0_ARREADY;
wire    gmem_0_RVALID;
wire   [255:0] gmem_0_RDATA;
wire    gmem_0_RLAST;
wire   [0:0] gmem_0_RID;
wire   [8:0] gmem_0_RFIFONUM;
wire   [0:0] gmem_0_RUSER;
wire   [1:0] gmem_0_RRESP;
wire    gmem_0_BVALID;
wire   [1:0] gmem_0_BRESP;
wire   [0:0] gmem_0_BID;
wire   [0:0] gmem_0_BUSER;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [63:0] entry_proc_U0_out_r_c_din;
wire    entry_proc_U0_out_r_c_write;
wire    read_task_U0_ap_start;
wire    read_task_U0_ap_done;
wire    read_task_U0_ap_continue;
wire    read_task_U0_ap_idle;
wire    read_task_U0_ap_ready;
wire    read_task_U0_m_axi_gmem_0_AWVALID;
wire   [63:0] read_task_U0_m_axi_gmem_0_AWADDR;
wire   [0:0] read_task_U0_m_axi_gmem_0_AWID;
wire   [31:0] read_task_U0_m_axi_gmem_0_AWLEN;
wire   [2:0] read_task_U0_m_axi_gmem_0_AWSIZE;
wire   [1:0] read_task_U0_m_axi_gmem_0_AWBURST;
wire   [1:0] read_task_U0_m_axi_gmem_0_AWLOCK;
wire   [3:0] read_task_U0_m_axi_gmem_0_AWCACHE;
wire   [2:0] read_task_U0_m_axi_gmem_0_AWPROT;
wire   [3:0] read_task_U0_m_axi_gmem_0_AWQOS;
wire   [3:0] read_task_U0_m_axi_gmem_0_AWREGION;
wire   [0:0] read_task_U0_m_axi_gmem_0_AWUSER;
wire    read_task_U0_m_axi_gmem_0_WVALID;
wire   [255:0] read_task_U0_m_axi_gmem_0_WDATA;
wire   [31:0] read_task_U0_m_axi_gmem_0_WSTRB;
wire    read_task_U0_m_axi_gmem_0_WLAST;
wire   [0:0] read_task_U0_m_axi_gmem_0_WID;
wire   [0:0] read_task_U0_m_axi_gmem_0_WUSER;
wire    read_task_U0_m_axi_gmem_0_ARVALID;
wire   [63:0] read_task_U0_m_axi_gmem_0_ARADDR;
wire   [0:0] read_task_U0_m_axi_gmem_0_ARID;
wire   [31:0] read_task_U0_m_axi_gmem_0_ARLEN;
wire   [2:0] read_task_U0_m_axi_gmem_0_ARSIZE;
wire   [1:0] read_task_U0_m_axi_gmem_0_ARBURST;
wire   [1:0] read_task_U0_m_axi_gmem_0_ARLOCK;
wire   [3:0] read_task_U0_m_axi_gmem_0_ARCACHE;
wire   [2:0] read_task_U0_m_axi_gmem_0_ARPROT;
wire   [3:0] read_task_U0_m_axi_gmem_0_ARQOS;
wire   [3:0] read_task_U0_m_axi_gmem_0_ARREGION;
wire   [0:0] read_task_U0_m_axi_gmem_0_ARUSER;
wire    read_task_U0_m_axi_gmem_0_RREADY;
wire    read_task_U0_m_axi_gmem_0_BREADY;
wire   [9:0] read_task_U0_input_r_address0;
wire    read_task_U0_input_r_ce0;
wire    read_task_U0_input_r_we0;
wire   [16:0] read_task_U0_input_r_d0;
wire   [31:0] read_task_U0_ap_return;
wire    ap_channel_done_N_c1_channel;
wire    N_c1_channel_full_n;
reg    ap_sync_reg_channel_write_N_c1_channel;
wire    ap_sync_channel_write_N_c1_channel;
wire    ap_channel_done_input_r;
wire    read_task_U0_input_r_full_n;
reg    ap_sync_reg_channel_write_input_r;
wire    ap_sync_channel_write_input_r;
wire    fir_U0_ap_start;
wire    fir_U0_ap_done;
wire    fir_U0_ap_continue;
wire    fir_U0_ap_idle;
wire    fir_U0_ap_ready;
wire   [9:0] fir_U0_in_r_address0;
wire    fir_U0_in_r_ce0;
wire   [9:0] fir_U0_out_r_address0;
wire    fir_U0_out_r_ce0;
wire    fir_U0_out_r_we0;
wire   [18:0] fir_U0_out_r_d0;
wire   [31:0] fir_U0_ap_return;
wire    ap_channel_done_N_c_channel;
wire    N_c_channel_full_n;
reg    ap_sync_reg_channel_write_N_c_channel;
wire    ap_sync_channel_write_N_c_channel;
wire    ap_channel_done_output_r;
wire    fir_U0_out_r_full_n;
reg    ap_sync_reg_channel_write_output_r;
wire    ap_sync_channel_write_output_r;
wire    write_task_U0_ap_start;
wire    write_task_U0_ap_done;
wire    write_task_U0_ap_continue;
wire    write_task_U0_ap_idle;
wire    write_task_U0_ap_ready;
wire   [9:0] write_task_U0_output_r_address0;
wire    write_task_U0_output_r_ce0;
wire    write_task_U0_m_axi_gmem_0_AWVALID;
wire   [63:0] write_task_U0_m_axi_gmem_0_AWADDR;
wire   [0:0] write_task_U0_m_axi_gmem_0_AWID;
wire   [31:0] write_task_U0_m_axi_gmem_0_AWLEN;
wire   [2:0] write_task_U0_m_axi_gmem_0_AWSIZE;
wire   [1:0] write_task_U0_m_axi_gmem_0_AWBURST;
wire   [1:0] write_task_U0_m_axi_gmem_0_AWLOCK;
wire   [3:0] write_task_U0_m_axi_gmem_0_AWCACHE;
wire   [2:0] write_task_U0_m_axi_gmem_0_AWPROT;
wire   [3:0] write_task_U0_m_axi_gmem_0_AWQOS;
wire   [3:0] write_task_U0_m_axi_gmem_0_AWREGION;
wire   [0:0] write_task_U0_m_axi_gmem_0_AWUSER;
wire    write_task_U0_m_axi_gmem_0_WVALID;
wire   [255:0] write_task_U0_m_axi_gmem_0_WDATA;
wire   [31:0] write_task_U0_m_axi_gmem_0_WSTRB;
wire    write_task_U0_m_axi_gmem_0_WLAST;
wire   [0:0] write_task_U0_m_axi_gmem_0_WID;
wire   [0:0] write_task_U0_m_axi_gmem_0_WUSER;
wire    write_task_U0_m_axi_gmem_0_ARVALID;
wire   [63:0] write_task_U0_m_axi_gmem_0_ARADDR;
wire   [0:0] write_task_U0_m_axi_gmem_0_ARID;
wire   [31:0] write_task_U0_m_axi_gmem_0_ARLEN;
wire   [2:0] write_task_U0_m_axi_gmem_0_ARSIZE;
wire   [1:0] write_task_U0_m_axi_gmem_0_ARBURST;
wire   [1:0] write_task_U0_m_axi_gmem_0_ARLOCK;
wire   [3:0] write_task_U0_m_axi_gmem_0_ARCACHE;
wire   [2:0] write_task_U0_m_axi_gmem_0_ARPROT;
wire   [3:0] write_task_U0_m_axi_gmem_0_ARQOS;
wire   [3:0] write_task_U0_m_axi_gmem_0_ARREGION;
wire   [0:0] write_task_U0_m_axi_gmem_0_ARUSER;
wire    write_task_U0_m_axi_gmem_0_RREADY;
wire    write_task_U0_m_axi_gmem_0_BREADY;
wire    write_task_U0_out_r_read;
wire    input_r_i_full_n;
wire    input_r_t_empty_n;
wire    output_r_i_full_n;
wire    output_r_t_empty_n;
wire    out_r_c_full_n;
wire   [63:0] out_r_c_dout;
wire    out_r_c_empty_n;
wire   [2:0] out_r_c_num_data_valid;
wire   [2:0] out_r_c_fifo_cap;
wire   [31:0] N_c1_channel_dout;
wire    N_c1_channel_empty_n;
wire   [2:0] N_c1_channel_num_data_valid;
wire   [2:0] N_c1_channel_fifo_cap;
wire   [31:0] N_c_channel_dout;
wire    N_c_channel_empty_n;
wire   [2:0] N_c_channel_num_data_valid;
wire   [2:0] N_c_channel_fifo_cap;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_read_task_U0_ap_ready;
wire    ap_sync_read_task_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_sync_reg_channel_write_N_c1_channel = 1'b0;
#0 ap_sync_reg_channel_write_input_r = 1'b0;
#0 ap_sync_reg_channel_write_N_c_channel = 1'b0;
#0 ap_sync_reg_channel_write_output_r = 1'b0;
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_read_task_U0_ap_ready = 1'b0;
end

top_input_r_RAM_AUTO_1R1W #(
    .DataWidth( 17 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
input_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(read_task_U0_input_r_address0),
    .i_ce0(read_task_U0_input_r_ce0),
    .i_we0(read_task_U0_input_r_we0),
    .i_d0(read_task_U0_input_r_d0),
    .i_q0(input_r_i_q0),
    .t_address0(fir_U0_in_r_address0),
    .t_ce0(fir_U0_in_r_ce0),
    .t_we0(1'b0),
    .t_d0(17'd0),
    .t_q0(input_r_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(input_r_i_full_n),
    .i_write(ap_channel_done_input_r),
    .t_empty_n(input_r_t_empty_n),
    .t_read(fir_U0_ap_ready)
);

top_output_r_RAM_AUTO_1R1W #(
    .DataWidth( 19 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
output_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .i_address0(fir_U0_out_r_address0),
    .i_ce0(fir_U0_out_r_ce0),
    .i_we0(fir_U0_out_r_we0),
    .i_d0(fir_U0_out_r_d0),
    .i_q0(output_r_i_q0),
    .t_address0(write_task_U0_output_r_address0),
    .t_ce0(write_task_U0_output_r_ce0),
    .t_we0(1'b0),
    .t_d0(19'd0),
    .t_q0(output_r_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(output_r_i_full_n),
    .i_write(ap_channel_done_output_r),
    .t_empty_n(output_r_t_empty_n),
    .t_read(write_task_U0_ap_ready)
);

top_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .in_r(in_r),
    .out_r(out_r),
    .N(N),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

top_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 70 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 256 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(read_task_U0_m_axi_gmem_0_ARVALID),
    .I_CH0_ARREADY(gmem_0_ARREADY),
    .I_CH0_ARADDR(read_task_U0_m_axi_gmem_0_ARADDR),
    .I_CH0_ARLEN(read_task_U0_m_axi_gmem_0_ARLEN),
    .I_CH0_RVALID(gmem_0_RVALID),
    .I_CH0_RREADY(read_task_U0_m_axi_gmem_0_RREADY),
    .I_CH0_RDATA(gmem_0_RDATA),
    .I_CH0_RFIFONUM(gmem_0_RFIFONUM),
    .I_CH0_AWVALID(write_task_U0_m_axi_gmem_0_AWVALID),
    .I_CH0_AWREADY(gmem_0_AWREADY),
    .I_CH0_AWADDR(write_task_U0_m_axi_gmem_0_AWADDR),
    .I_CH0_AWLEN(write_task_U0_m_axi_gmem_0_AWLEN),
    .I_CH0_WVALID(write_task_U0_m_axi_gmem_0_WVALID),
    .I_CH0_WREADY(gmem_0_WREADY),
    .I_CH0_WDATA(write_task_U0_m_axi_gmem_0_WDATA),
    .I_CH0_WSTRB(write_task_U0_m_axi_gmem_0_WSTRB),
    .I_CH0_BVALID(gmem_0_BVALID),
    .I_CH0_BREADY(write_task_U0_m_axi_gmem_0_BREADY)
);

top_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .out_r(out_r),
    .out_r_c_din(entry_proc_U0_out_r_c_din),
    .out_r_c_full_n(out_r_c_full_n),
    .out_r_c_write(entry_proc_U0_out_r_c_write),
    .out_r_c_num_data_valid(out_r_c_num_data_valid),
    .out_r_c_fifo_cap(out_r_c_fifo_cap)
);

top_read_task read_task_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(read_task_U0_ap_start),
    .ap_done(read_task_U0_ap_done),
    .ap_continue(read_task_U0_ap_continue),
    .ap_idle(read_task_U0_ap_idle),
    .ap_ready(read_task_U0_ap_ready),
    .m_axi_gmem_0_AWVALID(read_task_U0_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(1'b0),
    .m_axi_gmem_0_AWADDR(read_task_U0_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(read_task_U0_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(read_task_U0_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(read_task_U0_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(read_task_U0_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(read_task_U0_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(read_task_U0_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(read_task_U0_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(read_task_U0_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(read_task_U0_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(read_task_U0_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(read_task_U0_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(1'b0),
    .m_axi_gmem_0_WDATA(read_task_U0_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(read_task_U0_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(read_task_U0_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(read_task_U0_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(read_task_U0_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(read_task_U0_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(gmem_0_ARREADY),
    .m_axi_gmem_0_ARADDR(read_task_U0_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(read_task_U0_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(read_task_U0_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(read_task_U0_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(read_task_U0_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(read_task_U0_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(read_task_U0_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(read_task_U0_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(read_task_U0_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(read_task_U0_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(read_task_U0_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(gmem_0_RVALID),
    .m_axi_gmem_0_RREADY(read_task_U0_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(gmem_0_RDATA),
    .m_axi_gmem_0_RLAST(gmem_0_RLAST),
    .m_axi_gmem_0_RID(gmem_0_RID),
    .m_axi_gmem_0_RFIFONUM(gmem_0_RFIFONUM),
    .m_axi_gmem_0_RUSER(gmem_0_RUSER),
    .m_axi_gmem_0_RRESP(gmem_0_RRESP),
    .m_axi_gmem_0_BVALID(1'b0),
    .m_axi_gmem_0_BREADY(read_task_U0_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(2'd0),
    .m_axi_gmem_0_BID(1'd0),
    .m_axi_gmem_0_BUSER(1'd0),
    .in_r(in_r),
    .input_r_address0(read_task_U0_input_r_address0),
    .input_r_ce0(read_task_U0_input_r_ce0),
    .input_r_we0(read_task_U0_input_r_we0),
    .input_r_d0(read_task_U0_input_r_d0),
    .N(N),
    .ap_return(read_task_U0_ap_return)
);

top_fir fir_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(fir_U0_ap_start),
    .ap_done(fir_U0_ap_done),
    .ap_continue(fir_U0_ap_continue),
    .ap_idle(fir_U0_ap_idle),
    .ap_ready(fir_U0_ap_ready),
    .in_r_address0(fir_U0_in_r_address0),
    .in_r_ce0(fir_U0_in_r_ce0),
    .in_r_q0(input_r_t_q0),
    .out_r_address0(fir_U0_out_r_address0),
    .out_r_ce0(fir_U0_out_r_ce0),
    .out_r_we0(fir_U0_out_r_we0),
    .out_r_d0(fir_U0_out_r_d0),
    .p_read(N_c1_channel_dout),
    .ap_return(fir_U0_ap_return)
);

top_write_task write_task_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(write_task_U0_ap_start),
    .ap_done(write_task_U0_ap_done),
    .ap_continue(write_task_U0_ap_continue),
    .ap_idle(write_task_U0_ap_idle),
    .ap_ready(write_task_U0_ap_ready),
    .output_r_address0(write_task_U0_output_r_address0),
    .output_r_ce0(write_task_U0_output_r_ce0),
    .output_r_q0(output_r_t_q0),
    .m_axi_gmem_0_AWVALID(write_task_U0_m_axi_gmem_0_AWVALID),
    .m_axi_gmem_0_AWREADY(gmem_0_AWREADY),
    .m_axi_gmem_0_AWADDR(write_task_U0_m_axi_gmem_0_AWADDR),
    .m_axi_gmem_0_AWID(write_task_U0_m_axi_gmem_0_AWID),
    .m_axi_gmem_0_AWLEN(write_task_U0_m_axi_gmem_0_AWLEN),
    .m_axi_gmem_0_AWSIZE(write_task_U0_m_axi_gmem_0_AWSIZE),
    .m_axi_gmem_0_AWBURST(write_task_U0_m_axi_gmem_0_AWBURST),
    .m_axi_gmem_0_AWLOCK(write_task_U0_m_axi_gmem_0_AWLOCK),
    .m_axi_gmem_0_AWCACHE(write_task_U0_m_axi_gmem_0_AWCACHE),
    .m_axi_gmem_0_AWPROT(write_task_U0_m_axi_gmem_0_AWPROT),
    .m_axi_gmem_0_AWQOS(write_task_U0_m_axi_gmem_0_AWQOS),
    .m_axi_gmem_0_AWREGION(write_task_U0_m_axi_gmem_0_AWREGION),
    .m_axi_gmem_0_AWUSER(write_task_U0_m_axi_gmem_0_AWUSER),
    .m_axi_gmem_0_WVALID(write_task_U0_m_axi_gmem_0_WVALID),
    .m_axi_gmem_0_WREADY(gmem_0_WREADY),
    .m_axi_gmem_0_WDATA(write_task_U0_m_axi_gmem_0_WDATA),
    .m_axi_gmem_0_WSTRB(write_task_U0_m_axi_gmem_0_WSTRB),
    .m_axi_gmem_0_WLAST(write_task_U0_m_axi_gmem_0_WLAST),
    .m_axi_gmem_0_WID(write_task_U0_m_axi_gmem_0_WID),
    .m_axi_gmem_0_WUSER(write_task_U0_m_axi_gmem_0_WUSER),
    .m_axi_gmem_0_ARVALID(write_task_U0_m_axi_gmem_0_ARVALID),
    .m_axi_gmem_0_ARREADY(1'b0),
    .m_axi_gmem_0_ARADDR(write_task_U0_m_axi_gmem_0_ARADDR),
    .m_axi_gmem_0_ARID(write_task_U0_m_axi_gmem_0_ARID),
    .m_axi_gmem_0_ARLEN(write_task_U0_m_axi_gmem_0_ARLEN),
    .m_axi_gmem_0_ARSIZE(write_task_U0_m_axi_gmem_0_ARSIZE),
    .m_axi_gmem_0_ARBURST(write_task_U0_m_axi_gmem_0_ARBURST),
    .m_axi_gmem_0_ARLOCK(write_task_U0_m_axi_gmem_0_ARLOCK),
    .m_axi_gmem_0_ARCACHE(write_task_U0_m_axi_gmem_0_ARCACHE),
    .m_axi_gmem_0_ARPROT(write_task_U0_m_axi_gmem_0_ARPROT),
    .m_axi_gmem_0_ARQOS(write_task_U0_m_axi_gmem_0_ARQOS),
    .m_axi_gmem_0_ARREGION(write_task_U0_m_axi_gmem_0_ARREGION),
    .m_axi_gmem_0_ARUSER(write_task_U0_m_axi_gmem_0_ARUSER),
    .m_axi_gmem_0_RVALID(1'b0),
    .m_axi_gmem_0_RREADY(write_task_U0_m_axi_gmem_0_RREADY),
    .m_axi_gmem_0_RDATA(256'd0),
    .m_axi_gmem_0_RLAST(1'b0),
    .m_axi_gmem_0_RID(1'd0),
    .m_axi_gmem_0_RFIFONUM(9'd0),
    .m_axi_gmem_0_RUSER(1'd0),
    .m_axi_gmem_0_RRESP(2'd0),
    .m_axi_gmem_0_BVALID(gmem_0_BVALID),
    .m_axi_gmem_0_BREADY(write_task_U0_m_axi_gmem_0_BREADY),
    .m_axi_gmem_0_BRESP(gmem_0_BRESP),
    .m_axi_gmem_0_BID(gmem_0_BID),
    .m_axi_gmem_0_BUSER(gmem_0_BUSER),
    .out_r_dout(out_r_c_dout),
    .out_r_empty_n(out_r_c_empty_n),
    .out_r_read(write_task_U0_out_r_read),
    .out_r_num_data_valid(out_r_c_num_data_valid),
    .out_r_fifo_cap(out_r_c_fifo_cap),
    .p_read(N_c_channel_dout)
);

top_fifo_w64_d4_S out_r_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_out_r_c_din),
    .if_full_n(out_r_c_full_n),
    .if_write(entry_proc_U0_out_r_c_write),
    .if_dout(out_r_c_dout),
    .if_empty_n(out_r_c_empty_n),
    .if_read(write_task_U0_out_r_read),
    .if_num_data_valid(out_r_c_num_data_valid),
    .if_fifo_cap(out_r_c_fifo_cap)
);

top_fifo_w32_d2_S N_c1_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(read_task_U0_ap_return),
    .if_full_n(N_c1_channel_full_n),
    .if_write(ap_channel_done_N_c1_channel),
    .if_dout(N_c1_channel_dout),
    .if_empty_n(N_c1_channel_empty_n),
    .if_read(fir_U0_ap_ready),
    .if_num_data_valid(N_c1_channel_num_data_valid),
    .if_fifo_cap(N_c1_channel_fifo_cap)
);

top_fifo_w32_d2_S N_c_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(fir_U0_ap_return),
    .if_full_n(N_c_channel_full_n),
    .if_write(ap_channel_done_N_c_channel),
    .if_dout(N_c_channel_dout),
    .if_empty_n(N_c_channel_empty_n),
    .if_read(write_task_U0_ap_ready),
    .if_num_data_valid(N_c_channel_num_data_valid),
    .if_fifo_cap(N_c_channel_fifo_cap)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_N_c1_channel <= 1'b0;
    end else begin
        if (((read_task_U0_ap_done & read_task_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_N_c1_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_N_c1_channel <= ap_sync_channel_write_N_c1_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_N_c_channel <= 1'b0;
    end else begin
        if (((fir_U0_ap_done & fir_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_N_c_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_N_c_channel <= ap_sync_channel_write_N_c_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_input_r <= 1'b0;
    end else begin
        if (((read_task_U0_ap_done & read_task_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_input_r <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_input_r <= ap_sync_channel_write_input_r;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_output_r <= 1'b0;
    end else begin
        if (((fir_U0_ap_done & fir_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_output_r <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_output_r <= ap_sync_channel_write_output_r;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_read_task_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_read_task_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_read_task_U0_ap_ready <= ap_sync_read_task_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

assign ap_channel_done_N_c1_channel = (read_task_U0_ap_done & (ap_sync_reg_channel_write_N_c1_channel ^ 1'b1));

assign ap_channel_done_N_c_channel = (fir_U0_ap_done & (ap_sync_reg_channel_write_N_c_channel ^ 1'b1));

assign ap_channel_done_input_r = (read_task_U0_ap_done & (ap_sync_reg_channel_write_input_r ^ 1'b1));

assign ap_channel_done_output_r = (fir_U0_ap_done & (ap_sync_reg_channel_write_output_r ^ 1'b1));

assign ap_done = write_task_U0_ap_done;

assign ap_idle = (write_task_U0_ap_idle & read_task_U0_ap_idle & fir_U0_ap_idle & (1'b1 ^ N_c_channel_empty_n) & (1'b1 ^ N_c1_channel_empty_n) & entry_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_channel_write_N_c1_channel = ((ap_channel_done_N_c1_channel & N_c1_channel_full_n) | ap_sync_reg_channel_write_N_c1_channel);

assign ap_sync_channel_write_N_c_channel = ((ap_channel_done_N_c_channel & N_c_channel_full_n) | ap_sync_reg_channel_write_N_c_channel);

assign ap_sync_channel_write_input_r = ((read_task_U0_input_r_full_n & ap_channel_done_input_r) | ap_sync_reg_channel_write_input_r);

assign ap_sync_channel_write_output_r = ((fir_U0_out_r_full_n & ap_channel_done_output_r) | ap_sync_reg_channel_write_output_r);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_read_task_U0_ap_ready = (read_task_U0_ap_ready | ap_sync_reg_read_task_U0_ap_ready);

assign ap_sync_ready = (ap_sync_read_task_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign fir_U0_ap_continue = ap_sync_channel_write_output_r;

assign fir_U0_ap_start = N_c1_channel_empty_n;

assign fir_U0_out_r_full_n = output_r_i_full_n;

assign gmem_0_BID = 1'd0;

assign gmem_0_BRESP = 2'd0;

assign gmem_0_BUSER = 1'd0;

assign gmem_0_RID = 1'd0;

assign gmem_0_RLAST = 1'b0;

assign gmem_0_RRESP = 2'd0;

assign gmem_0_RUSER = 1'd0;

assign read_task_U0_ap_continue = ap_sync_channel_write_input_r;

assign read_task_U0_ap_start = ((ap_sync_reg_read_task_U0_ap_ready ^ 1'b1) & ap_start);

assign read_task_U0_input_r_full_n = input_r_i_full_n;

assign write_task_U0_ap_continue = ap_continue;

assign write_task_U0_ap_start = N_c_channel_empty_n;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "top_hls_deadlock_detector.vh"
// synthesis translate_on

endmodule //top

